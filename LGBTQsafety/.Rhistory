row_index <- which(data2$Country == country)
}
numeric_columns <- data2[row_index, c("numeric_activity", "numeric_marriage", "numeric_disc", "numeric_gndr")]
print(numeric_columns)
rating <- mean(as.numeric(unlist(numeric_columns)))
return(paste("The safety rating is", rating, "out of 5"))
}
#THIS FUNCTION NEEDS TO BE FIXED TO ONLY CALCULATE THE RATING OF THAT SPECIFIC ROW!!!!!!!
safety_rating("Azerbaijan")
setwd("C:/Users/purpl/Downloads")
install.packages("GermanWordle_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(germanwordle)
library(shiny)
library(htmltools)
playwordle()
library(shiny)
library(bslib)
library(dplyr)
library(LGBTQsafety)
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafety/R')
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafety/R')
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafety/R')
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafety/R')
View(data2)
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
rlang::last_trace()
# 7. your package can now be installed (by you and others!)
rm(list = ls())
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety")
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
# 7. your package can now be installed (by you and others!)
rm(list = ls())
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
runApp('R')
runApp('R')
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
runApp('~/GitHub/Zetea-LGBTQsafety')
# 7. your package can now be installed (by you and others!)
rm(list = ls())
rm(list = ls())
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
devtools::document()
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
runApp('~/GitHub/Zetea-LGBTQsafety')
library(LGBTQsafety)
remove.packages("LGBTQsafety")
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
# 7. your package can now be installed (by you and others!)
rm(list = ls())
devtools::install()
devtools::document()
devtools::document()
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
# 7. your package can now be installed (by you and others!)
rm(list = ls())
#Changing first function so that it also calculates and loads the dataset and adds stuff
#' @title Read Data Function
#'
#' @description Reads the dataset required for the following functions in the package and downloads it to the global environment.
#'
#' @param start A string where users should enter the word "yes".
#'
#' @return If users enter "yes", this returns the dataset and saves it. If not, users are prompted to enter "yes".
#'
#' @examples
#' # Download the dataset
#' read_data("yes")
#'
#' @export
read_data <- function(start) {
if (tolower(start) == "yes") {
url <- "https://raw.githubusercontent.com/asarafoglou-ptns/Zetea-LGBTQsafety/week1/LGBTQsafety/PTNS_countries_LGBTQ.csv"
# Attempt to download and read the CSV file
tryCatch({
data <- read.csv(url)
assign("data", data, envir = .GlobalEnv)
return(data)
}, error = function(e) {
return(paste("An error occurred while downloading the dataset:", e$message))
})
} else {
return("Type 'yes' to begin")
}
}
#' @title Converting Output to Numeric Function
#'
#' @description Converts string values in the dataset columns same.sex.sexual.activity, same.sex.marriage, gender.ID.expression and anti.discrimination.laws.sexual.orientation, which can then be used to calculate safety ratings.
#'
#' @param data A dataset which has been downloaded from github.
#'
#' @return A modified version of the dataset with numeric values to be used in the safety rating calculation.
#'
#' @examples
#' # Convert the data in 4 columns from the dataset data to numeric values.
#' numeric_data(data)
#'
#' @note
#' Using this package requires the dataset "PTNS_countries_LGBTQ.csv", and also requires the dplyr package.
#'
numeric_data <- function(data) {
# Loading the dplyr package for use
if (!requireNamespace("dplyr", quietly = TRUE)) {
install.packages("dplyr")
}
library(dplyr)
#Converting Sexual Activity Law column to numerical
numeric_sexual_activity <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Male illegal, female legal" ~ 2,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
#Converting Anti Discrimination Law column to numerical
numeric_discrim_law <- function(number) {
case_when(
number == "all banned" ~ 5,
number == "All banned" ~ 5,
number == "No" ~ 1,
number == "no" ~ 1,
TRUE ~ 3
)
}
#Converting Gender Identity Law column to numerical
numeric_gndr_ID <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Legal after surgery" ~ 4,
number == "Legal with surgery" ~ 4,
number == "Legal change to 3rd gender" ~ 4,
number == "3rd gender (hijra) allowed" ~ 4,
number == "Documents can be amended" ~4,
number == "Legal after surgery and sterilization" ~ 3,
number == "Legal with surgery and sterilization" ~ 3,
number == "Legal after medical intervention" ~ 3,
number == "Illegal" ~1,
TRUE ~ 3
)
}
#Converting Same Sex Marriage Law column to numerical
numeric_same_sex_marriage <- function(number){
case_when(
number == "Legal" ~ 5,
number == "Illegal" ~1,
TRUE ~ 3
)
}
#Save as separate objects
numeric_activity <- numeric_sexual_activity(data$Same.sex.sexual.activity)
numeric_disc <- numeric_discrim_law(data$anti.discrimination.laws.sexual.orientation)
numeric_gndr <- numeric_gndr_ID(data$gender.ID.expression)
numeric_marriage <- numeric_same_sex_marriage(data$same.sex.marriage)
#Create a new dataset with converted numerical values
data2 <- data.frame(
Country = data$Country,
Same_sex_sexual_activity = data$Same.sex.sexual.activity,
Anti_discrimination_laws = data$anti.discrimination.laws.sexual.orientation,
Gender_ID_expression = data$gender.ID.expression,
Same_sex_marriage = data$same.sex.marriage,
numeric_activity = numeric_activity,
numeric_marriage = numeric_marriage,
numeric_disc = numeric_disc,
numeric_gndr = numeric_gndr
)
# Return the modified data
assign("data2", data2, envir = .GlobalEnv)
return(data2)
}
numeric_data(data)
# 7. your package can now be installed (by you and others!)
rm(list = ls())
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
# 7. your package can now be installed (by you and others!)
rm(list = ls())
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
library(shiny); runApp('~/RM Year 2/Programming the Next Step/appnew.R')
read_calc_data <- function() {
url <- "https://raw.githubusercontent.com/asarafoglou-ptns/Zetea-LGBTQsafety/week1/LGBTQsafety/PTNS_countries_LGBTQ.csv"
# Attempt to download and read the CSV file
data <- tryCatch({
read.csv(url)
}, error = function(e) {
stop(paste("An error occurred while downloading the dataset:", e$message))
})
# Converting Sexual Activity Law column to numerical
numeric_sexual_activity <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Male illegal, female legal" ~ 2,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Anti Discrimination Law column to numerical
numeric_discrim_law <- function(number) {
case_when(
number == "all banned" ~ 5,
number == "All banned" ~ 5,
number == "No" ~ 1,
number == "no" ~ 1,
TRUE ~ 3
)
}
# Converting Gender Identity Law column to numerical
numeric_gndr_ID <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Legal after surgery" ~ 4,
number == "Legal with surgery" ~ 4,
number == "Legal change to 3rd gender" ~ 4,
number == "3rd gender (hijra) allowed" ~ 4,
number == "Documents can be amended" ~ 4,
number == "Legal after surgery and sterilization" ~ 3,
number == "Legal with surgery and sterilization" ~ 3,
number == "Legal after medical intervention" ~ 3,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Same Sex Marriage Law column to numerical
numeric_same_sex_marriage <- function(number){
case_when(
number == "Legal" ~ 5,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Adding converted columns to dataset
data <- data %>%
mutate(
numeric_activity = numeric_sexual_activity(Same.sex.sexual.activity),
numeric_disc = numeric_discrim_law(anti.discrimination.laws.sexual.orientation),
numeric_gndr = numeric_gndr_ID(gender.ID.expression),
numeric_marriage = numeric_same_sex_marriage(same.sex.marriage)
)
return(data)
}
read_calc_data
read_calc_data("start")
# 7. your package can now be installed (by you and others!)
rm(list = ls())
library(dplyr)
# Combined function with an argument
read_and_process_data <- function(start) {
if (tolower(start) == "yes") {
url <- "https://raw.githubusercontent.com/asarafoglou-ptns/Zetea-LGBTQsafety/week1/LGBTQsafety/PTNS_countries_LGBTQ.csv"
# Attempt to download and read the CSV file
data <- tryCatch({
read.csv(url)
}, error = function(e) {
stop(paste("An error occurred while downloading the dataset:", e$message))
})
# Converting Sexual Activity Law column to numerical
numeric_sexual_activity <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Male illegal, female legal" ~ 2,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Anti Discrimination Law column to numerical
numeric_discrim_law <- function(number) {
case_when(
number == "all banned" ~ 5,
number == "All banned" ~ 5,
number == "No" ~ 1,
number == "no" ~ 1,
TRUE ~ 3
)
}
# Converting Gender Identity Law column to numerical
numeric_gndr_ID <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Legal after surgery" ~ 4,
number == "Legal with surgery" ~ 4,
number == "Legal change to 3rd gender" ~ 4,
number == "3rd gender (hijra) allowed" ~ 4,
number == "Documents can be amended" ~ 4,
number == "Legal after surgery and sterilization" ~ 3,
number == "Legal with surgery and sterilization" ~ 3,
number == "Legal after medical intervention" ~ 3,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Same Sex Marriage Law column to numerical
numeric_same_sex_marriage <- function(number){
case_when(
number == "Legal" ~ 5,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Apply conversions
data <- data %>%
mutate(
numeric_activity = numeric_sexual_activity(Same.sex.sexual.activity),
numeric_disc = numeric_discrim_law(anti.discrimination.laws.sexual.orientation),
numeric_gndr = numeric_gndr_ID(gender.ID.expression),
numeric_marriage = numeric_same_sex_marriage(same.sex.marriage)
)
return(data)
} else {
return("Type 'yes' to begin")
}
}
read_and_calculate_data("yes")
read_and_calculate_data <- function(start) {
if (tolower(start) == "yes") {
url <- "https://raw.githubusercontent.com/asarafoglou-ptns/Zetea-LGBTQsafety/week1/LGBTQsafety/PTNS_countries_LGBTQ.csv"
# Attempt to download and read the CSV file
data <- tryCatch({
read.csv(url)
}, error = function(e) {
stop(paste("An error occurred while downloading the dataset:", e$message))
})
# Converting Sexual Activity Law column to numerical
numeric_sexual_activity <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Male illegal, female legal" ~ 2,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Anti Discrimination Law column to numerical
numeric_discrim_law <- function(number) {
case_when(
number == "all banned" ~ 5,
number == "All banned" ~ 5,
number == "No" ~ 1,
number == "no" ~ 1,
TRUE ~ 3
)
}
# Converting Gender Identity Law column to numerical
numeric_gndr_ID <- function(number) {
case_when(
number == "Legal" ~ 5,
number == "Legal after surgery" ~ 4,
number == "Legal with surgery" ~ 4,
number == "Legal change to 3rd gender" ~ 4,
number == "3rd gender (hijra) allowed" ~ 4,
number == "Documents can be amended" ~ 4,
number == "Legal after surgery and sterilization" ~ 3,
number == "Legal with surgery and sterilization" ~ 3,
number == "Legal after medical intervention" ~ 3,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Converting Same Sex Marriage Law column to numerical
numeric_same_sex_marriage <- function(number){
case_when(
number == "Legal" ~ 5,
number == "Illegal" ~ 1,
TRUE ~ 3
)
}
# Apply conversions
data <- data %>%
mutate(
numeric_activity = numeric_sexual_activity(Same.sex.sexual.activity),
numeric_disc = numeric_discrim_law(anti.discrimination.laws.sexual.orientation),
numeric_gndr = numeric_gndr_ID(gender.ID.expression),
numeric_marriage = numeric_same_sex_marriage(same.sex.marriage)
)
return(data)
} else {
return("Type 'yes' to begin")
}
}
read_and_calculate_data("yes")
# 7. your package can now be installed (by you and others!)
rm(list = ls())
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
library(shiny); runApp('~/RM Year 2/Programming the Next Step/appnew.R')
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
library(LGBTQsafety)
read_and_calculate_data("yes")
sexuality_marriage_law(Rwanda)
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
library(shiny); runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
# 7. your package can now be installed (by you and others!)
rm(list = ls())
devtools::install()
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
library(shiny); runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
runApp('~/RM Year 2/Programming the Next Step/appnew.R')
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install()
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafetyshinyapp.R')
# 4.1 Define which functions should be available to your users
# use "#' @export" for that, add it to your .R function file
# 4.2 Use the document() function to make the functions available
# to users
setwd("C:/Users/purpl/OneDrive/Documents/GitHub/Zetea-LGBTQsafety/LGBTQsafety")
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
# 7. your package can now be installed (by you and others!)
rm(list = ls())
devtools::install()
runApp('~/GitHub/Zetea-LGBTQsafety/LGBTQsafetyshinyapp.R')
